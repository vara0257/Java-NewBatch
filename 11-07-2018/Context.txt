Software:
==========
S/w is a collection of pgms meant for performing some specific operations...

In 
1. System s/ws
  - developmnt of device drivers -> printers, scanners,....
  - developmnt of language compilers, interpretors, ...
  - developmnt of RTOS - 

2. Application s/ws
  purpose : developing s/ws / projects for org
    - org:
      - Financial sectors
      - health sectors
      - educations sectors..

  to dev app s/ws for an org we use 2 types of tech..
    -  front end tech
    purpose: GUI
      - platform dependent front end tech
      - platform independnt front end tech
    -  backend tech  
    purpose: to persist data
      - files
      - db (RDMS)

Standalone apps vs Distributed apps
=====================================
Standalone apps -> runs in the context of local, results are sharable locally
Distributed apps -> runs in the context of WWW, results are sharable accross globe



3. Internet s/ws
  purpose: is to build Distributed apps...


----------------------------------------------------------------------------------------------
** Java can be used to build app s/ws as well as Internet s/ws, and more popular for building Internet s/ws...



--------------------------------------------------
History
=======
JAMES GOSLING -> creator -> SUN MICROSYSTEMS
 - 1990 -> middle of 1991 => OAK

 1995 => Java

 JSE => corejava
 JEE => ADV Java
 JME => Android


version:
=======
JDK 1.0
1.1         JAVA
JAVA2 => 1.2, 1.3, 1.4 
JAVA5 => JDK 1.5 =? tigger s/w
JAVA8 => Stream api
JAVA9 => modular 


=============================================================
Buzzwords of JAVA
=================
1. Simple
2. Platform independnt
3. Architectural neutral
4. Portable
5. Mult-threaded
6. Network
7. Distributed
8. High-Performance
9. High Interpreted
10. Robust
11. Dynamic
12. Secured
13. OOPL

----------------
POPL vs OOPL
------------
C vs JAVA

---------
1. Simple
============


"Byte Code"-> set of  optimized instructions generated by java compieler during compilation phase.. 
- java removed pointers concept
JVM , JIT

Bytecode => platform independnt
JVM => platform dependent
JIT => will come into picture only after 1st time execution of byte code...

GC => 

API (Application pgmng interface) => packages => collection of class, interfaces, subpackages 


friendly syntaxes..
